import asyncio
import random
from datetime import datetime, UTC, timedelta
from math import ceil
from pathlib import Path

import aiofiles
from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from telethon import TelegramClient
from telethon.errors import FloodWaitError, RPCError

from bot.callbacks.account import AccountCallback, PaginationCallbackData
from bot.db.models import Account
from bot.db.account.requests import AccountDAO
from bot.db.sessions.requests import SessionDAO
from bot.db.users.requests import UserDAO
from bot.fsm.fsm import AccountInfoSG

router = Router(name="start_account_router")


async def paginator(session: AsyncSession, page: int = 0):
    builder = InlineKeyboardBuilder()
    accounts = await AccountDAO.get_accounts(session=session)

    limit = 8
    start_offset = page * limit
    end_offset = start_offset + limit

    for account in accounts[start_offset:end_offset]:
        builder.row(InlineKeyboardButton(
            text=f'üñ• {account.username}',
            callback_data=AccountCallback(
                identification=account.id,
            ).pack()
        )
    )

    buttons_row = []

    if page > 0:
        buttons_row.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=PaginationCallbackData(
                action="prev",
                page=page - 1,
            ).pack())
        )
    if end_offset < len(accounts):
        buttons_row.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=PaginationCallbackData(
                action="next",
                page=page + 1,
            ).pack())
        )

    builder.row(*buttons_row)
    builder.row(InlineKeyboardButton(
        text=f"---{page + 1 if accounts else 0}/{ceil(len(accounts) / limit)}---",
        callback_data="number_of_pages",
    ))
    builder.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='go_back_to_menu'))

    return builder.as_markup()


def account_info(account: Account):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîî –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_sending"))
    builder.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account"))
    builder.row(InlineKeyboardButton(text="üìÅ –ü–æ–º–µ–Ω—è—Ç—å –±–∞–∑—É –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="delete_users_db"))
    builder.row(InlineKeyboardButton(text="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="spam_msg_info"))

    if account.is_active:
        builder.row(InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="stop_sending"))

    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_accounts"))

    message = (f"üñ• –ê–∫–∫–∞—É–Ω—Ç <b>@{account.username}</b>\n\n"
               f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: <em>{account.phone}</em>\n"
               f"üîê –ü–∞—Ä–æ–ª—å: <em>{account.fa2}</em>\n"
               f"‚öôÔ∏è Api_id: <em>{account.api_id}</em>\n"
               f"‚öôÔ∏è Api_hash: <em>{account.api_hash}</em>\n\n"
               f"üìÅ –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n<em>{account.db_name}.txt</em>\n\n"
               f"ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {'–¥–∞ ‚úÖ' if account.is_active else '–Ω–µ—Ç ‚ùå'}")

    return message, builder


@router.callback_query(StateFilter(AccountInfoSG.accounts), F.data == "number_of_pages")
async def show_number_of_pages_handler(callback: CallbackQuery):
    await callback.answer()


@router.callback_query(StateFilter(default_state), F.data == "start_account")
async def start_account_handler(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="üñ• –ê–∫–∫–∞—É–Ω—Ç—ã:",
        reply_markup=await paginator(session=session),
    )
    await state.set_state(AccountInfoSG.accounts)
    await state.update_data(page=0)


@router.callback_query(StateFilter(AccountInfoSG.accounts), F.data == "back_to_accounts")
async def back_to_accounts_handler(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    page = data.get("page")
    message = callback.message.edit_text(
        text="üñ• –ê–∫–∫–∞—É–Ω—Ç—ã:",
        reply_markup=await paginator(session=session, page=page)
    )

    if data.get("disconnected_dt", None):
        disconnected_dt = datetime.fromisoformat(data.get("disconnected_dt"))
        dt_now = datetime.now(tz=UTC)

        if disconnected_dt > dt_now:
            seconds_to_wait = (disconnected_dt - dt_now).seconds
            await callback.answer(
                text=f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_to_wait} —Å–µ–∫—É–Ω–¥, —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è!"
            )
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_accounts"))

            await callback.message.edit_text(
                text=f"‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞—Å—Å—ã–ª–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_to_wait} —Å–µ–∫—É–Ω–¥!",
                reply_markup=builder.as_markup(),
            )
        else:
            await callback.answer()
            await state.update_data(disconnected_dt=None, is_disconnected=False)
            await message
    else:
        await callback.answer()
        await message


@router.callback_query(StateFilter(AccountInfoSG.accounts), PaginationCallbackData.filter())
async def pagination_handler(
        callback: CallbackQuery, callback_data: PaginationCallbackData, session: AsyncSession, state: FSMContext,
):
    await callback.answer()
    await callback.message.edit_text(
        text="üñ• –ê–∫–∫–∞—É–Ω—Ç—ã:",
        reply_markup=await paginator(session=session, page=callback_data.page)
    )
    await state.update_data(page=callback_data.page)


@router.callback_query(StateFilter(AccountInfoSG.accounts), AccountCallback.filter())
async def user_info_handler(
        callback: CallbackQuery, callback_data: AccountCallback, session: AsyncSession, state: FSMContext,
):
    await callback.answer()
    account = await AccountDAO.get_account(session=session, id=callback_data.identification)
    await state.update_data(
        account_id=account.id,
        api_id=account.api_id,
        api_hash=account.api_hash,
        phone=account.phone,
    )

    info, builder = account_info(account)
    await callback.message.edit_text(
        text=f"{info}",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(StateFilter(AccountInfoSG.accounts), F.data == "start_sending")
async def start_sending_handler(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer()

    data = await state.get_data()
    account = await AccountDAO.get_account(session=session, id=data["account_id"])
    error_message = (f"‚ö†Ô∏è –í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, –∞–∫–∫–∞—É–Ω—Ç @{account.username} –ø–æ–ª—É—á–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫—É "
                     "–∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –∏–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ "
                     "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –±–æ—Ç–∞ —Å –¢–µ–ª–µ–≥—Ä–∞–º!\n\n"
                     "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                     "1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–π username –∏ –º—ã –µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ª—É—á–∏–≤ –æ—à–∏–±–∫—É\n"
                     "2) –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—É—á–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º\n"
                     "3) –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –í—ã –Ω–µ –±—ã–ª–∏ –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞, –≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ —á–µ–≥–æ "
                     "–±–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –ø–æ—Ç–æ–º—É –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—à–∏–±–∫—É, "
                     "–Ω–æ –ø–æ —Å—É—Ç–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ\n\n"
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ—Ç –ª–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –æ—à–∏–±–æ–∫?")

    client = TelegramClient(
        session=f"bot/sessions/{data['api_id']}_{data['phone'][1:]}",
        api_id=account.api_id,
        api_hash=account.api_hash,
        system_version="4.16.30-vxCUSTOM",
    )
    await client.connect()

    users = await UserDAO.get_users_by_account(
        session=session,
        api_id=account.api_id,
        api_hash=account.api_hash,
    )
    await AccountDAO.update_account(session=session, is_active=True)

    info, builder = account_info(account)
    await callback.message.edit_text(
        text=f"{info}",
        reply_markup=builder.as_markup(),
    )
    count: int = 0

    async with client:
        if not users:
            await callback.message.answer(
                text="–ü–æ—Ö–æ–∂–µ, –±–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç–∞—è üòì\n"
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ/–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–∞–∑—É –∫–ª–∏–µ–Ω—Ç–æ–≤!"
            )

        for user in users:
            if count != 30:
                if (await state.get_data()).get("is_disconnected", None):
                    # –†–∞—Å—Å—ã–ª–∫—É –æ—Ç–º–µ–Ω–∏–ª–∏ -> –æ—Ç–º–µ–Ω—è–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å—Å—ã–ª–∞—Ç—å –±–æ–ª—å—à–µ
                    await state.update_data(is_disconnected=False)
                    task = asyncio.current_task()
                    task.cancel()
                    return
                else:
                    count += 1
                    try:
                        if not account.spam_msg:
                            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –ø—Ä–æ—Å–∏–º –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å
                            raise KeyError
                        await client.send_message(
                            entity=f"{user}",
                            message=f"{account.spam_msg}",
                        )
                        await UserDAO.update_user_by_account(
                            session=session,
                            api_id=account.api_id,
                            api_hash=account.api_hash,
                            username=user,
                        )
                        await asyncio.sleep(random.randint(10, 20))
                    except FloodWaitError as flood:
                        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ñ–ª—É–¥ –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º, —Ç–æ –∂–¥–µ–º, –ø–æ–∫–∞ —Ñ–ª—É–¥ —Å–ø–∞–¥—ë—Ç
                        await asyncio.sleep(flood.seconds + 1)
                        await client.send_message(
                            entity=f"{user.strip()}",
                            message=f"{account.spam_msg}",
                        )
                        await UserDAO.update_user_by_account(
                            session=session,
                            api_id=account.api_id,
                            api_hash=account.api_hash,
                            username=user,
                        )
                        await asyncio.sleep(random.randint(10, 20))
                    except ValueError:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π username, —Ç–æ –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å is_sent –Ω–∞ True
                        # –∏ –ø—Ä–æ–ø—É—Å—Ç–∏–º —é–∑–µ—Ä–∞
                        await UserDAO.update_user_by_account(
                            session=session,
                            api_id=account.api_id,
                            api_hash=account.api_hash,
                            username=user,
                        )
                        await asyncio.sleep(random.randint(10, 20))
                        continue
                    except RPCError as e:
                        # –ü–æ–π–º–∞–ª–∏ –æ—à–∏–±–∫—É –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º
                        await callback.message.answer(
                            text=f"{error_message}",
                        )
                        await callback.message.bot.send_message(
                            chat_id=292972814,
                            text="–û—à–∏–±–∫–∞:\n\n"
                                 f"{e}"
                        )
                        await asyncio.sleep(random.randint(10, 20))
                        continue
                    except KeyError:
                        # –ü—Ä–æ—Å–∏–º —Å–æ–∑–¥–∞—Ç—å —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
                        await callback.message.answer(
                            text="–ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å üòî\n"
                                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                        )
                        break
                    except Exception as e:
                        # –õ–∏–±–æ –ø–æ–π–º–∞–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É –¢–µ–ª–µ–≥—Ä–∞–º, –ª–∏–±–æ —á—Ç–æ-—Ç–æ –∏–Ω–æ–µ
                        await callback.message.answer(
                            text=f"{error_message}",
                        )
                        await callback.message.bot.send_message(
                            chat_id=292972814,
                            text="–û—à–∏–±–∫–∞:\n\n"
                                 f"{e}"
                        )
                        await asyncio.sleep(random.randint(10, 20))
                        continue
            else:
                # –†–∞–∑–æ—Å–ª–∞–ª–∏ 10 –ª—é–¥—è–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–ø–∏–º 1.5 —Å—É—Ç–æ–∫, —á—Ç–æ–±—ã –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–¥–æ—Ö–Ω—É–ª,
                # –∏–Ω–∞—á–µ –¢–µ–ª–µ–≥—Ä–∞–º –º–æ–∂–µ—Ç –¥–∞—Ç—å –±–∞–Ω –∑–∞ —á–∞—Å—Ç—É—é —Ä–∞—Å—Å—ã–ª–∫—É
                await callback.message.answer(
                    text=f"‚úÖ –ë–æ—Ç —Ä–∞–∑–æ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ {count} —Ä–∞–∑ ({count} –ª—é–¥–µ–π)\n"
                         "üí§ –ë–æ—Ç –≤ —Å–ø—è—á–∫–µ –Ω–∞ 1.5 –¥–Ω—è (36 —á–∞—Å–æ–≤)"
                )

                count = 0
                await asyncio.sleep(60 * 60 * 24 * 1.5)  # —Å–ø–∏–º 1.5 –¥–Ω—è (36 —á–∞—Å–æ–≤)

        # –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        # –∏–ª–∏ –º—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –µ—ë, –ø–æ—Ç–æ–º—É —á—Ç–æ:
        # 1) –Ω–µ—Ç —Ä–∞—Å—Å—ã–ª–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # 2) –ø–æ–π–º–∞–ª–∏ –æ—à–∏–±–∫—É –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º
        # 3) –ø–æ–π–º–∞–ª–∏ –æ—à–∏–±–∫—É –æ—Ç aiogram/telethon/Python
        await AccountDAO.update_account(session=session, is_active=False)
        info, builder = account_info(account)
        await callback.message.edit_text(
            text=f"{info}",
            reply_markup=builder.as_markup(),
        )


@router.callback_query(StateFilter(AccountInfoSG.accounts), F.data == "delete_account")
async def delete_account_handler(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup()

    data = await state.get_data()
    account = await AccountDAO.get_account(session=session, id=data["account_id"])

    client = TelegramClient(
        session=f"bot/sessions/{data['api_id']}_{data['phone'][1:]}",
        api_id=account.api_id,
        api_hash=account.api_hash,
        system_version="4.16.30-vxCUSTOM",
    )
    await client.connect()

    async with client:
        await client.log_out()

    unsend_accounts = await UserDAO.get_users_by_account(
        session=session,
        api_id=account.api_id,
        api_hash=account.api_hash,
    )

    if unsend_accounts:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã, –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –¥–æ—à–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏,
        # —Ç–æ —Å–æ–±–∏—Ä–∞–µ–º —ç—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ .txt –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏
        async with aiofiles.open(
                file=f"bot/dbs_users/saved_unsend_accounts/{account.api_id}_{account.api_hash}.txt",
                mode="r+"
        ) as file:
            await file.writelines(map(lambda x: x + "\n", unsend_accounts))
        await callback.message.answer_document(
            document=FSInputFile(path=Path(f"bot/dbs_users/saved_unsend_accounts/{account.api_id}_{account.api_hash}.txt"))
        )

    await AccountDAO.delete_account(session=session, id=data["account_id"])
    await SessionDAO.delete_session(api_id=account.api_id, phone=account.phone)

    await callback.message.answer(
        text=f"–ê–∫–∫–∞—É–Ω—Ç <b>@{account.username}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω ‚úÖ\n\n"
             "üñ• –ê–∫–∫–∞—É–Ω—Ç—ã:",
        reply_markup=await paginator(session, data["page"])
    )


@router.callback_query(StateFilter(AccountInfoSG.accounts), F.data == "delete_users_db")
async def delete_users_db_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup()

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_account_info"))

    await callback.message.answer(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π <b>.txt</b> —Ñ–∞–π–ª –±–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤!",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(AccountInfoSG.change_db)


@router.message(StateFilter(AccountInfoSG.change_db))
async def change_db_handler(message: Message, session: AsyncSession, state: FSMContext, bot: Bot):
    data = await state.get_data()

    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    filename = f"{data['api_id']}_{data['api_hash']}"

    await bot.download_file(file.file_path, f"bot/dbs_users/{filename}.txt")
    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª –Ω–æ–≤—É—é –±–∞–∑—É –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚úÖ",
    )

    account = await AccountDAO.get_account(session=session, id=data["account_id"])
    info, builder = account_info(account)

    await message.edit_text(
        text=f"{info}",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(AccountInfoSG.accounts)


@router.callback_query(StateFilter(AccountInfoSG.accounts), F.data == "spam_msg_info")
async def spam_msg_info_handler(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup()
    data = await state.get_data()
    account = await AccountDAO.get_account(session=session, id=data["account_id"])

    if not account.spam_msg:
        await callback.message.answer(
            text="–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
        )
        await state.set_state(AccountInfoSG.change_spam_msg)
    else:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_spam_msg"))
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_account_info"))

        await callback.message.answer(
            text="–í–∞—à–µ —Ä–∞—Å—Å—ã–ª–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
                 f"{account.spam_msg}",
            reply_markup=builder.as_markup(),
        )


@router.callback_query(StateFilter(AccountInfoSG.accounts), F.data == "change_spam_msg")
async def change_spam_msg_cb_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup()
    await callback.message.answer(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
    )
    await state.set_state(AccountInfoSG.change_spam_msg)


@router.message(StateFilter(AccountInfoSG.change_spam_msg), F.text)
async def change_spam_msg_handler(message: Message, session: AsyncSession, state: FSMContext):
    await state.update_data(spam_msg=message.text.strip())
    await AccountDAO.update_account(session=session, spam_msg=message.text.strip())
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_account_info"))

    await message.answer(
        text="–í–∞—à–µ —Ä–∞—Å—Å—ã–ª–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
             f"{message.text.strip()}",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data == "back_to_account_info")
async def back_to_account_info_handler(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup()

    data = await state.get_data()
    account = await AccountDAO.get_account(session=session, id=data["account_id"])
    info, builder = account_info(account)

    await callback.message.answer(
        text=f"{info}",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(AccountInfoSG.accounts)


@router.callback_query(StateFilter(AccountInfoSG.accounts), F.data == "stop_sending")
async def stop_sending_handler(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer()
    await state.update_data(
        is_disconnected=True,
        disconnected_dt=(datetime.now(tz=UTC) + timedelta(seconds=20)).isoformat(),
    )
    await AccountDAO.update_account(session=session, is_active=False)

    data = await state.get_data()
    seconds_to_wait = (datetime.fromisoformat(data["disconnected_dt"]) - datetime.now(tz=UTC)).seconds

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_accounts"))

    await callback.message.edit_text(
        text=f"‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞—Å—Å—ã–ª–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_to_wait} —Å–µ–∫—É–Ω–¥!",
        reply_markup=builder.as_markup(),
    )
